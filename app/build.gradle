plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id "androidx.navigation.safeargs.kotlin"
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion "29.0.2"

    packagingOptions {
        merge '**/LICENSE.txt'
        merge '**/NOTICE.txt'
    }

    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        def versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def versionMajor = 1
        def versionMinor = 2
        def versionNumber = versionProps['VERSION_BUILD'].toInteger()

        defaultConfig {
            applicationId "com.flora.michael.wfcstream"
            minSdkVersion rootProject.minSdkVersion
            targetSdkVersion rootProject.targetSdkVersion
            versionCode versionProps['VERSION_BUILD'].toInteger()
            versionName "${versionMajor}.${versionMinor}.${versionNumber}"
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
            vectorDrawables.useSupportLibrary = true
            multiDexEnabled true
        }

        android.applicationVariants.all { v ->
            if (v.buildType.name == "release") {
                v.assemble.doLast {
                    versionNumber = versionProps['VERSION_BUILD'].toInteger() + 1
                    versionProps['VERSION_BUILD'] = versionNumber.toString()
                    versionProps.store(versionPropsFile.newWriter(), null)
                }
            }
        }

    } else {
        throw new GradleException("Could not read version.properties!")
    }

    signingConfigs {
        config {
            keyAlias 'WfcStream'
            keyPassword '853tHJemgY6kUczw'
            storeFile file('../WFCStreamCRM.jks')
            storePassword 'KkCuK3qGZXGKvWmN'
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    // Main options for Java compilation
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    testOptions.unitTests {
        includeAndroidResources = true
    }
}

dependencies {
    def lifecycle_version = '2.2.0'

    // Flashphoner
    implementation project(path: ':wcs-android-sdk-1.1.0.13-release')

    // Dependency Injection
    def kodein_version = '6.5.0'
    implementation "org.kodein.di:kodein-di-generic-jvm:$kodein_version"
    implementation "org.kodein.di:kodein-di-framework-android-x:$kodein_version"

    // Permissions
    implementation 'com.karumi:dexter:6.0.1'

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.3'

    // KTX Kotlin extensions
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.fragment:fragment-ktx:1.2.4' // "by Fragment.viewModels()" and "by Fragment.activityViewModels()" delegates support
    implementation 'androidx.activity:activity-ktx:1.1.0' // "by Activity.viewModels()" delegate support
    //implementation "androidx.room:room-ktx:$room_version" // Coroutines support for Room
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version" // Provides viewModelScope() for coroutines
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    // UI
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta4'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    implementation "androidx.fragment:fragment:1.3.0-alpha03"

    // Navigation
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"// Provides ViewModel and LiveData

    // Permissions
    implementation 'com.karumi:dexter:6.0.1'

    // Gson
    implementation 'com.google.code.gson:gson:2.8.5'

    // Google Play Services
    implementation "com.google.android.gms:play-services-base:17.2.1"

    // REST API
    def okhttp_version = '3.11.0'
    def retrofit_version = '2.6.2'
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation 'com.squareup.retrofit2:converter-scalars:2.8.1'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

}
